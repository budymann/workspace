spring.application.name=transaction-service
server.port=8080

spring.cloud.stream.kafka.binder.brokers=localhost:19092

spring.h2.console.enabled=true
# For in-memory storage
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;IGNORECASE=TRUE;
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=simplepass
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.show-sql=true
# This has to be over-ridden because
# it's not kept create rather kept none or validate after the first ddl creation.
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory


##Kafka Configurations
spring.cloud.function.definition= consumer;supplier;
#Consumer
spring.cloud.stream.bindings.consumer-in-0.destination= financial-transaction
spring.cloud.stream.bindings.consumer-in-0.group= financial-transaction-group
spring.cloud.stream.bindings.consumer-in-0.consumer.content-type= avro/bytes
spring.cloud.stream.bindings.consumer-in-0.consumer.use-native-decoding= true
spring.cloud.stream.bindings.consumer-in-0.consumer.batch-mode= true

spring.cloud.stream.kafka.binder.consumerProperties.max.poll.records= 20
spring.cloud.stream.kafka.binder.consumerProperties.fetch.min.bytes= 500000
spring.cloud.stream.kafka.binder.consumerProperties.fetch6.max.wait.ms= 10000
spring.cloud.stream.kafka.bindings.consumer-in-0.consumer.configuration.value.deserializer=com.budymann.container.transactionserviceapi.messaging.FinancialTransactionDeserializer

#Producer
spring.cloud.stream.bindings.supplier-out-0.destination= financial-transaction
spring.cloud.stream.bindings.supplier-out-0.producer.useNativeEncoding= true
spring.cloud.stream.kafka.bindings.supplier-out-0.producer.configuration.value.serializer= com.budymann.container.transactionserviceapi.messaging.FinancialTransactionSerializer


